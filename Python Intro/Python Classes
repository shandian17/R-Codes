####################################################
##################### Classes ######################
####################################################
1. Create empty Classes
> Class Employee:
      Pass
> emp1 = Employee()
> emp2 = Employee()     #emp1 and emp2 are the unique INSTANCE of the class Employee
> print(emp1)
: <__main__.Employee object at 0x1013775fb>

2. Instance Variables (attirbute)
> emp1.first = 'Way'
> emp1.last = 'Ze'

3. Create Methods for Classes that assign attributes automatically
> Class Employee:
      def __init__(self,first,last):           #when creating method, it take the first arg as instance automatically
          self.first = first
          self.last = last
> emp1 = Employee('Way','Ze')

4. Create gereneral methods
> Class Employee:
      def __init__(self,first,last):          
          self.first = first
          self.last = last          
      def fullname(self):             #since python use space to distinguish chunks, all methods should be under clss
          return '{} {}'.format(self.first, self.last)
> emp1 = Employee('Way', 'Ze')
> print(emp1.first)           #since first is just a attribute, we do not need ()
> print(emp1.fullname())      #since fullname is a method, we need () after that
> emp1.fullname()                 #call method from instance 
> Employee.fullname(emp2)         #call method from class


####################################################
################ Classes Attributes ################
####################################################
1. Class Varibles
> Class Employee:
      raise_amount = 1.04
      num_of_emps = 0
      def __init__(self,first,last):          
          self.first = first
          self.last = last 
          self.pay = 50000
          
          Employee.num_of_emps += 1
      def fullname(self):             #since python use space to distinguish chunks, all methods should be under clss
          return '{} {}'.format(self.first, self.last)
      def apply_raise(self):
          self.pay = int(self.pay * self.raise_amount)      #Employee.raise_amount also work
> emp1 = Employee('Way','Ze')
> Employee.raise_amount = 1.04
> emp1.raise_amount
: 1.04       #python will check the whether the instance have the attribute or not, if nothing found, it will check the class
> emp2 = Employee('Chloe','Ma')
> emp1.raise_amount
> emp2.raise_amount
: 1.04
: 1.04
> emp.raise_amount = 1.05
> emp1.raise_amount
> emp2.raise_amount
> Employee.raise_amount
> Employee.num_of_emps
: 1.05          #it will check the attribute of the instance first, since it is found, then it return the value
: 1.04
: 1.04
: 2
