####################################################
################### Text Data ######################
####################################################
1. Escape Sign \
> message = 'Bobby\'s world'
> message = "Bobby's world"

2. Multiline msg
> message = """asfasf
               asfdasldf"""

3. Location of string
> print(message[0:5])
> print(message[ :6])

4. Methods (functions of object)
> message.upper()
> message.count('l')                              #count how many ls in message
> message.find('l'))                              #find the FIRST 'l' in message
> message.replace('Hello', 'Hi')                  #the original is not changed
> message = message.replace('Hello', 'Hi')

5. Concatenate
> message = greeting + ' ' + name + '. Welcome!'
> message = '{}, {}. Welcome!'.format(greating, name)    #{} is place holder
> message = f'{greating}, {name}. Welcome!'              #f strings with Python 3.6

6. Help: show methods
> print(dir(m))
> print(type(m))              #return class of m
> print(help(STR))            #help only accept actual class of the object. For example m is string, so str

####################################################
#################### Numbers #######################
####################################################
1. Incremental functions
> num = num +1
> num = 2
> num += 1
: num = 3

2. Convert string to in
> num = int('123')

####################################################
############### List, Tuples, Sets #################
####################################################
1. List
> c = ['His', 'Hers', 'Ours', 'Yours']
> len(c) 
: 4

2. Append method of list
> c.append('Mine')
> c.insert(2,'Mine')         #insert to the 3rd position

3. Combine Lists - Extenda() method
> c2 = ['he', 'she']
> c.extend(c2)
: ['His', 'Hers', 'Ours', 'Yours', 'he', 'she']
> c.append(c2)
: ['His', 'Hers', 'Ours', 'Yours', ['he', 'she']]

4. Remove values from list - remove(), pop() methods
> c.remove('Yours')          #unlike strings, method of list will affect the original list
> c.pop()                    #by default, it remove the last item in the list and retrun the value of it

5. Reverse or sort list
> c.reverse()
> c.sort()/c.sort(reverse)
> sorted(c)                  #this will not affect the original list

6. Check the list - index() methods and in
> c.index('His')              #similar to the Find() method of strings. list do not has find() method
> 'Ours' in c
> for lalala in c:
      print(lalala)
      
7. Enumerate functions - include index in the loop
> for num, lalala in enumerate(c, start = 2):
      print (num, lalala)
: 2 Ours
  3 Yours
  4 he
  5 she
  
8. Convert list to strings - join() and split() method
> string = ', '.join(c)
> string
: 'His, Hers, Ours, Yours, he, she'
> string.split(', ')
> [His, Hers, Ours, Yours, he, she]

9. Mutable object
> list1 = ['Her','She','His']
> list2 = list1
> list1[0] = 'I'
> list2
: ['I','She','His']

10. Tuples (imutable)
> t = ('Her', 'She')

11. Sets - Unordered and distinct values
> sets = {'History', 'Match', 'Physics'}
> sets
: {'Match','History','Physics'}             #sets do no have order
> sets = {'He', 'She', 'He'}
> sets
: {'He', 'She'}                             #sets will remove dup automatically

12. Membership tests
> 'He' in sets                              #Even though list can do the same, but set is faster
: True

13. Cross check btw sets
> set1 = {'He','She','It','I'}
> set2 = {'She','I','His','Its}
> set1.intersection(set2)
: {'She','I'}
> set1.difference(set2)
: {'He','It'}
> set2.difference(set1)
: {'His','Its'}
> set1.union(set2)
: {'He','His','She','It','I','Its'}

14. Create empaty Set, Tuple, List
> empty_list = []
> empty_list = list()
> empty_tuple = ()
> empty_tuple = tuple()
> empty_set = set()                         #{} will create an empty dictionary


####################################################
#################### Dictionary ####################
####################################################
1. Define a dictionary
> st = {'name': 'John', 'age': 25, 'courses': ['Math','CS']}
> st['courses']
: ['Math','CS']
> st.get('phone','not found')
: 'not found'
> st.get('phone')
: None                                #the get() method can be used for extract undefined keys. The default is None

2. Update the key
> st['phone']= '555-5555'
> st['name'] = 'Jo'
> print(st)
: {'name': 'Jo', 'age': 25,..., 'phone': '555-5555'}
> st.update({'name': 'Jane', 'age': 26, 'ph': 'A'}

3. Delete the key
> del st['age']
> st.pop('age')

4. Extract values and keys
> print(len(st))                #return how many keys in the dictionary
> st.key()                      #return keys in the dict
> st.values()                   #return values in the dict
> st.items()                    #return keys and values in pair

5. Loop through Dict
> for K, V in st.items()
    print(K, V)
    
####################################################
#################### Conditions ####################
####################################################
1. If statement
> L = 'Python'
> IF L == 'Python' and 5==5:
      Print(44)
  Elif L == 'Java':
      Print(22)
  Else:
      print(55)
      
 2. 'IS' test identity
 > a = [1,2,3]
 > b = [1,2,3]
 > a == b
 : True
 > a is b
 : False
 > print(id(a))
 : 1242352953
 > print(id(b))
 : 2391584325
 > b = a
 > a is b
 > True
 
 3. Boolean          #None, False, 0, '', (), [], {} are return False
 
####################################################
################# Loops and Iteratio ###############
####################################################
1. Basic Loop with Break
> nums = [1,2,3,4,5]
> for n in nums:
    if n == 1:
      print('f')
      continue
    elif num = 2:
      print('222')
      print('hhh')              #python use space to determine which hierarchy a statment is belong to. R use {} 
    elif n == 4
      print('Found!')
      break
    print(n)
: f
  222
  hhh
  2
  3
  Found!
  
2. Nested Loops
> for n in nums:
    for l in 'abc'
      print(n, l)
 
3. Range
> for i in range(1,11)          #from 1 to 10
    print(i)
> fro i in range(10)
    print(i)                    #from 0 to 9
    
4. While Loops
> while x < 10:
    print(x)
    x += 1
    
 
####################################################
##################### Functions ####################
####################################################    
1. Simple functions
> def sample():
    return 'Hello'
> sample().upper()            #since the function will retrun a string, we can just treat the fcn as a string

2. Function with vars
> def sample(var = 'u'):                  #set a varible with a default value 'u'
    retrun '{} i dont know.'.format(var)
    
3. Function with positional arg and keyword arg
> def sample(*args, **kwags):         #args and kwags are just conventions, it can be any name
    print(args)
    print(kwargs)
> sample(1,2,'Mat', name='J',age=22)
: (1,2,'Mat')
  {'name': 'J', 'age': 22}
> course = ['M', 'CS']
> info = {'name': 'John', 'age': 22]
> sample(course, info)
: (['M', 'CS'],{'name': 'John', 'age': 22})           #the two var are treated as two prositional
: {}                                                  #arg so they are combined as a tuple
> sample(*course, **info)
: ('M', 'CS')
: {'name': 'John', 'age': 22}


: 
